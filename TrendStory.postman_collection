{
	"info": {
		"_postman_id": "3604202e-572b-415e-a66e-2a7dc1d263eb",
		"name": "TrendStory Minimal Test Cases",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44645304"
	},
	"item": [
		{
			"name": "GET Root",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Generate Story - News Comedy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is JSON\", function () {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response is a valid JSON object\", function () {\r",
							"  pm.expect(pm.response.json()).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Response has a 'story' property that is a string\", function () {\r",
							"  const responseBody = pm.response.json();\r",
							"  pm.expect(responseBody).to.have.property('story');\r",
							"  pm.expect(responseBody.story).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"The 'story' property contains some text\", function () {\r",
							"  const responseBody = pm.response.json();\r",
							"  pm.expect(responseBody.story.length).to.be.greaterThan(50);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has an 'error' property that is null\", function () {\r",
							"  const responseBody = pm.response.json();\r",
							"  pm.expect(responseBody).to.have.property('error');\r",
							"  pm.expect(responseBody.error).to.be.null;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"source\": \"news\",\r\n    \"theme\": \"comedy\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/generate-story",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"generate-story"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Generate Story - YouTube Drama",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is JSON\", function () {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response is a valid JSON object\", function () {\r",
							"  pm.expect(pm.response.json()).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Response has a 'story' property that is a string\", function () {\r",
							"  const responseBody = pm.response.json();\r",
							"  pm.expect(responseBody).to.have.property('story');\r",
							"  pm.expect(responseBody.story).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"The 'story' property contains some text\", function () {\r",
							"  const responseBody = pm.response.json();\r",
							"  pm.expect(responseBody.story.length).to.be.greaterThan(50);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has an 'error' property that is null\", function () {\r",
							"  const responseBody = pm.response.json();\r",
							"  pm.expect(responseBody).to.have.property('error');\r",
							"  pm.expect(responseBody.error).to.be.null;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"source\": \"youtube\",\r\n    \"theme\": \"drama\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/generate-story",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"generate-story"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Generate Story - Trends Horror",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is JSON\", function () {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response is a valid JSON object\", function () {\r",
							"  pm.expect(pm.response.json()).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Response has a 'story' property that is a string\", function () {\r",
							"  const responseBody = pm.response.json();\r",
							"  pm.expect(responseBody).to.have.property('story');\r",
							"  pm.expect(responseBody.story).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"The 'story' property contains some text\", function () {\r",
							"  const responseBody = pm.response.json();\r",
							"  pm.expect(responseBody.story.length).to.be.greaterThan(50);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has an 'error' property that is null\", function () {\r",
							"  const responseBody = pm.response.json();\r",
							"  pm.expect(responseBody).to.have.property('error');\r",
							"  pm.expect(responseBody.error).to.be.null;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"source\": \"google\",\r\n    \"theme\": \"comedy\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/generate-story",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"generate-story"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Generate Story - Invalid Source",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains invalid source error message\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.error).to.equal(\"Invalid source\");\r",
							"    pm.expect(response.story).to.be.null;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"source\": \"UNDEFINED\",\r\n    \"theme\": \"comedy\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/generate-story",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"generate-story"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Generate Story - Invalid Theme",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains invalid theme error message\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.error).to.equal(\"Invalid theme\");\r",
							"    pm.expect(response.story).to.be.null;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"source\": \"news\",\r\n    \"theme\": \"newTheme\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/generate-story",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"generate-story"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Generate Story - Source Missing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains source error message\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.error).to.equal(\"Source is required\");\r",
							"    pm.expect(response.story).to.be.null;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"source\": \"\",\r\n    \"theme\": \"comedy\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/generate-story",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"generate-story"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Generate Story - Theme Missing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains theme error message\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.error).to.equal(\"Theme is required\");\r",
							"    pm.expect(response.story).to.be.null;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"source\": \"news\",\r\n    \"theme\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/generate-story",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"generate-story"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
}